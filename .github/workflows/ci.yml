name: aws infra for lead scoring model 

on:
  push:
    branches: [ main, feature/*,develop ]
  pull_request:
    branches: [  ]
    

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      
      # - name: Install deps
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     pip install coverage
      # - name: Install aws-cli  
      #   run: |
      #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"  -o "aws-cli.zip"
      #     unzip aws-cli.zip 
      #     sudo ./aws/install --update
      #     rm -rf aws-cli.zip ./aws
      # - name: Set up AWS credentials
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      #     aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      #     aws configure set default.region us-east-1    

      # # - name: Lint & Typecheck
      # #   run: |
      # #     ruff check .
      # #     mypy app

      # - name: Unit tests
      #   run: |
      #     coverage run -m pytest -q
      #     coverage xml

      # - name: Bandit (security)
      #   run: bandit -r app -x tests

      # # - name: Build Docker
      # #   run: docker build -t app:ci .

      # - name: Trivy scan
      #   uses: aquasecurity/trivy-action@0.28.0
      #   continue-on-error: true
      #   with:
      #     image-ref: 'app:ci'
      #     format: 'table'
      #     exit-code: '0'

      # - name: Tfsec
      #   uses: aquasecurity/tfsec-action@v1.0.3
      #   continue-on-error: true
      #   with:
      #     working_directory: infra/terraform

      # - name: Checkov
      #   uses: bridgecrewio/checkov-action@v12
      #   continue-on-error: true
      #   with:
      #     directory: infra/terraform
      #     quiet: true

  # Example deploy job (needs AWS OIDC configuration & env secrets)
  deploy-staging:
    needs: build-test-scan
    runs-on: ubuntu-latest
    env: 
      bucket: "smm-sagemaker/model"
    strategy:
      matrix:
        env: [ dev ]
    
    environment: ${{ matrix.env }}  # use GH Environments for approvals on 'prod'    
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Package model
      #   run: |
      #     tar -czvf model-${GITHUB_SHA}.tar.gz model/
      #     echo "ARTIFACT=model-${GITHUB_SHA}.tar.gz" >> $GITHUB_ENV

      # - name: Upload to S3 (versioned path)
      #   run: |
      #     aws s3 cp $ARTIFACT s3://<bucket>/${{ matrix.env }}/$ARTIFACT

      - name: Deploy (autoscaled Realtime)
        env:
          ARTIFACT_S3: s3://${{ env.bucket }}/xgboost_model.tar.gz
          ENV: ${{ matrix.env }}
        run: |
          python app/deploy.py --artifact $ARTIFACT_S3 --env $ENV
