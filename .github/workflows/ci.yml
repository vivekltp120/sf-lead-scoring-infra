name: ci

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Install aws-cli  
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"  -o "aws-cli.zip"
          unzip aws-cli.zip 
          sudo ./aws/install --update
          rm -rf aws-cli.zip ./aws
      - name: Set up AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1    

      # - name: Lint & Typecheck
      #   run: |
      #     ruff check .
      #     mypy app

      - name: Unit tests
        run: |
          coverage run -m pytest -q
          coverage xml

      - name: Bandit (security)
        run: bandit -r app -x tests

      - name: Build Docker
        run: docker build -t app:ci .

      # - name: Trivy scan
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: 'app:ci'
      #     format: 'table'
      #     exit-code: '0'

      # - name: Tfsec
      #   uses: aquasecurity/tfsec-action@v1.0.3
      #   with:
      #     working_directory: infra/terraform

      - name: Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infra/terraform
          quiet: true

  # Example deploy job (needs AWS OIDC configuration & env secrets)
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build-test-scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lead-scorer-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Terraform Init/Plan/Apply (staging)
        working-directory: infra/terraform
        run: |
          terraform init -input=false
          terraform plan -input=false -out=tfplan
          terraform apply -input=false -auto-approve tfplan
